/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as authenticatedImport } from './routes/__authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as BoardIdImport } from './routes/board.$id'
import { Route as authenticatedWorkspaceShortnameImport } from './routes/__authenticated/workspace.$shortname'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedRoute = authenticatedImport.update({
  id: '/__authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BoardIdRoute = BoardIdImport.update({
  id: '/board/$id',
  path: '/board/$id',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedWorkspaceShortnameRoute =
  authenticatedWorkspaceShortnameImport.update({
    id: '/workspace/$shortname',
    path: '/workspace/$shortname',
    getParentRoute: () => authenticatedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/__authenticated': {
      id: '/__authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authenticatedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/board/$id': {
      id: '/board/$id'
      path: '/board/$id'
      fullPath: '/board/$id'
      preLoaderRoute: typeof BoardIdImport
      parentRoute: typeof rootRoute
    }
    '/__authenticated/workspace/$shortname': {
      id: '/__authenticated/workspace/$shortname'
      path: '/workspace/$shortname'
      fullPath: '/workspace/$shortname'
      preLoaderRoute: typeof authenticatedWorkspaceShortnameImport
      parentRoute: typeof authenticatedImport
    }
  }
}

// Create and export the route tree

interface authenticatedRouteChildren {
  authenticatedWorkspaceShortnameRoute: typeof authenticatedWorkspaceShortnameRoute
}

const authenticatedRouteChildren: authenticatedRouteChildren = {
  authenticatedWorkspaceShortnameRoute: authenticatedWorkspaceShortnameRoute,
}

const authenticatedRouteWithChildren = authenticatedRoute._addFileChildren(
  authenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof authenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/board/$id': typeof BoardIdRoute
  '/workspace/$shortname': typeof authenticatedWorkspaceShortnameRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof authenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/board/$id': typeof BoardIdRoute
  '/workspace/$shortname': typeof authenticatedWorkspaceShortnameRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/__authenticated': typeof authenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/board/$id': typeof BoardIdRoute
  '/__authenticated/workspace/$shortname': typeof authenticatedWorkspaceShortnameRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/board/$id'
    | '/workspace/$shortname'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/register' | '/board/$id' | '/workspace/$shortname'
  id:
    | '__root__'
    | '/'
    | '/__authenticated'
    | '/login'
    | '/register'
    | '/board/$id'
    | '/__authenticated/workspace/$shortname'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authenticatedRoute: typeof authenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  BoardIdRoute: typeof BoardIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authenticatedRoute: authenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  BoardIdRoute: BoardIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/__authenticated",
        "/login",
        "/register",
        "/board/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/__authenticated": {
      "filePath": "__authenticated.tsx",
      "children": [
        "/__authenticated/workspace/$shortname"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/board/$id": {
      "filePath": "board.$id.tsx"
    },
    "/__authenticated/workspace/$shortname": {
      "filePath": "__authenticated/workspace.$shortname.tsx",
      "parent": "/__authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
