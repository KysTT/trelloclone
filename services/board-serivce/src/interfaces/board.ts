// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: src/proto/board.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'board';

export enum VisibilityEnum {
  public = 0,
  workspace = 1,
  private = 2,
  UNRECOGNIZED = -1,
}

export interface CreateBoardRequest {
  name: string;
  visibility: VisibilityEnum;
  workspace_id: number;
  user_id: number;
}

export interface FindByIdRequest {
  id: number;
}

export interface DrawBoardsResponse {
  boards: DrawBoardResponse[];
}

export interface DrawBoardResponse {
  id: number;
  name: string;
  visibility: VisibilityEnum;
  categories: Category[];
}

export interface Category {
  id: number;
  name: string;
  cards: Card[];
}

export interface Card {
  id: number;
}

export const BOARD_PACKAGE_NAME = 'board';

export interface BoardServiceClient {
  create(
    request: CreateBoardRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<DrawBoardResponse>;

  findById(
    request: FindByIdRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<DrawBoardResponse>;

  findByWorkspaceId(
    request: FindByIdRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<DrawBoardsResponse>;

  findByUserId(
    request: FindByIdRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<DrawBoardsResponse>;
}

export interface BoardServiceController {
  create(
    request: CreateBoardRequest,
    metadata: Metadata,
    ...rest: any
  ):
    | Promise<DrawBoardResponse>
    | Observable<DrawBoardResponse>
    | DrawBoardResponse;

  findById(
    request: FindByIdRequest,
    metadata: Metadata,
    ...rest: any
  ):
    | Promise<DrawBoardResponse>
    | Observable<DrawBoardResponse>
    | DrawBoardResponse;

  findByWorkspaceId(
    request: FindByIdRequest,
    metadata: Metadata,
    ...rest: any
  ):
    | Promise<DrawBoardsResponse>
    | Observable<DrawBoardsResponse>
    | DrawBoardsResponse;

  findByUserId(
    request: FindByIdRequest,
    metadata: Metadata,
    ...rest: any
  ):
    | Promise<DrawBoardsResponse>
    | Observable<DrawBoardsResponse>
    | DrawBoardsResponse;
}

export function BoardServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'create',
      'findById',
      'findByWorkspaceId',
      'findByUserId',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('BoardService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('BoardService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const BOARD_SERVICE_NAME = 'BoardService';
