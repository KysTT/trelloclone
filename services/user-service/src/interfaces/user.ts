// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: src/proto/user.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'user';

export interface CreateUserRequest {
  name: string;
  username: string;
  email: string;
  password: string;
}

export interface CreateUserResponse {
  name: string;
  username: string;
  email: string;
  password: string;
}

export interface FindByEmailRequest {
  email: string;
}

export interface FindByEmailResponse {
  id: number;
  name: string;
  username: string;
  email: string;
}

export interface FindByIdRequest {
  id: number;
}

export interface FindByIdResponse {
  id: number;
  name: string;
  username: string;
  email: string;
  workspaces: DrawWorkspaceDto[];
  boards_member: DrawBoardDto[];
  attached_cards: DrawCardDto[];
}

export interface DrawWorkspaceDto {
  id: number;
  name: string;
  shortname: string;
  boards: DrawBoardDto[];
}

export interface DrawBoardDto {
  id: number;
  name: string;
  visibility: string;
}

export interface DrawCardDto {
  id: number;
  name: string;
  description: string;
}

export const USER_PACKAGE_NAME = 'user';

export interface UserServiceClient {
  register(
    request: CreateUserRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<CreateUserResponse>;

  findOneByEmail(
    request: FindByEmailRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<FindByEmailResponse>;

  findOneById(
    request: FindByIdRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<FindByIdResponse>;
}

export interface UserServiceController {
  register(
    request: CreateUserRequest,
    metadata: Metadata,
    ...rest: any
  ):
    | Promise<CreateUserResponse>
    | Observable<CreateUserResponse>
    | CreateUserResponse;

  findOneByEmail(
    request: FindByEmailRequest,
    metadata: Metadata,
    ...rest: any
  ):
    | Promise<FindByEmailResponse>
    | Observable<FindByEmailResponse>
    | FindByEmailResponse;

  findOneById(
    request: FindByIdRequest,
    metadata: Metadata,
    ...rest: any
  ):
    | Promise<FindByIdResponse>
    | Observable<FindByIdResponse>
    | FindByIdResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['register', 'findOneByEmail', 'findOneById'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const USER_SERVICE_NAME = 'UserService';
